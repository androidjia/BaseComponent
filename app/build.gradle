apply plugin: 'com.android.application'

android {
    signingConfigs {
        userConfig {
            storeFile file('/Users/junshuai.jia/AndroidStudioProjects/BaseComponent/baseKeyStore')
            storePassword '123456'
            keyAlias 'baseComponent'
            keyPassword '123456'
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.jjs.zero.basecomponent"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0.2"

//        //只支持中文
//        resConfigs "zh"
//        ndk {
//            //设置支持的so库架构
//            abiFilters "armeabi-v7a"
//        }
    }

//    dataBinding{
//        enabled = true
//    }
//    guadle plugin4.0.0之后使用
    buildFeatures {
        dataBinding = true
    }

    buildTypes {
        release {

//            //混淆
            minifyEnabled true
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
//            签名
            signingConfig signingConfigs.userConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            debuggable true
            buildConfigField 'String', 'domain', '"http://192.168.0.1:5555/MyProject/"'
            manifestPlaceholders = [BASE_URL: "http://192.168.0.1:5555/MyProject/"]
        }


        debug {
            //混淆
            minifyEnabled false
            //            签名
//            signingConfig signingConfigs.defaultSign
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'domain', '"http://192.168.0.1:8888/MyProject/"'
            manifestPlaceholders = [BASE_URL: "http://192.168.0.1:8888/MyProject/"]
        }

        innerTest.initWith(buildTypes.debug)
        innerTest{
            buildConfigField 'String', 'domain', '"http://192.168.0.1:6666/MyProject/"'
            manifestPlaceholders = [BASE_URL: "http://192.168.0.1:6666/MyProject/"]
            matchingFallbacks = ['innerTest', 'debug', 'release']
        }
        //自定义构建版本
//        dev.initWith(buildTypes.debug)
//        dev {
//            buildConfigField 'String', 'domain', '"http://192.168.0.1:7776/MyProject/"'
//            matchingFallbacks = ['dev', 'debug', 'release']
//        }

//        但在 Gradle 3.0 下，如果你的 app 包含了新的自定义的 buildType，而依赖库中却没有相应的自定义 buildType，则编译阶段就会报错。
//        解决方案一：在子模块中同样定义一个空pre{}类型
//        解决方案二： matchingFallbacks，它可以指定在子模块中没找到对应的构建类型时要加载哪个类型
//        pro.initWith(buildTypes.debug)
//        pro {
//            buildConfigField 'String', 'domain', '"http://192.168.0.1:3333/MyProject/"'
//            matchingFallbacks = ['pro', 'debug', 'release']
//        }

    }
    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //引入aar
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

//    sourceSets {
//        main.jniLibs.srcDirs = ['libs']
//    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def type = variant.buildType.name
            def apkName = 'baseComponent_' + type + "_V" + versionName + '.apk'
            output.outputFileName = apkName
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

//    implementation(name: '****', ext: 'aar')

    implementation project(path: ':baseviewlibrary')
    implementation project(path: ':viewlibrary')
    implementation project(path: ':modellibrary')
    implementation project(path: ':servicelibrary')
    implementation project(path: ':utilslibrary')
//    implementation project(path: ':httplibrary')
//    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"


    implementation  "com.scwang.smart:refresh-layout-kernel:${rootProject.ext.dependencies.smartRefreshLayout}"      //核心必须依赖
//    implementation  "com.scwang.smart:refresh-header-classics:${rootProject.ext.dependencies.smartRefreshLayout}"    //经典刷新头
//    implementation  "com.scwang.smart:refresh-header-radar:${rootProject.ext.dependencies.smartRefreshLayout}"       //雷达刷新头
//    implementation  "com.scwang.smart:refresh-header-falsify:${rootProject.ext.dependencies.smartRefreshLayout}"     //虚拟刷新头
    implementation  "com.scwang.smart:refresh-header-material:${rootProject.ext.dependencies.smartRefreshLayout}"    //谷歌刷新头
//    implementation  "com.scwang.smart:refresh-header-two-level:${rootProject.ext.dependencies.smartRefreshLayout}"   //二级刷新头
    implementation  "com.scwang.smart:refresh-footer-ball:${rootProject.ext.dependencies.smartRefreshLayout}"        //球脉冲加载
//    implementation  "com.scwang.smart:refresh-footer-classics:${rootProject.ext.dependencies.smartRefreshLayout}"    //经典加载

    implementation ("io.reactivex.rxjava2:rxandroid:${rootProject.ext.dependencies.rxandroid2}"){
        exclude group: 'org.reactivestreams'
    }
    implementation ("io.reactivex.rxjava2:rxjava:${rootProject.ext.dependencies.rxjava2}"){
        exclude group: 'org.reactivestreams'
    }

    implementation "com.squareup.okhttp3:okhttp:3.14.9"

}